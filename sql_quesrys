CREATE DATABASE IMDB;
USE IMDB;

CREATE TABLE Movie (
    movie_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255),
    release_year YEAR
);

CREATE TABLE Media (
    media_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT,
    media_type ENUM('Video', 'Image'),
    file_path VARCHAR(255),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id)
);

CREATE TABLE Genre (
    genre_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

CREATE TABLE Movie_Genre (
    movie_id INT,
    genre_id INT,
    PRIMARY KEY(movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (genre_id) REFERENCES Genre(genre_id)
);

CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(100)
);

CREATE TABLE Review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT,
    user_id INT,
    review_text TEXT,
    rating INT,
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

CREATE TABLE Artist (
    artist_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);

CREATE TABLE Skill (
    skill_id INT PRIMARY KEY AUTO_INCREMENT,
    skill_name VARCHAR(100)
);

CREATE TABLE Artist_Skill (
    artist_id INT,
    skill_id INT,
    PRIMARY KEY(artist_id, skill_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (skill_id) REFERENCES Skill(skill_id)
);

CREATE TABLE Role (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(100)
);

CREATE TABLE Movie_Artist_Role (
    movie_id INT,
    artist_id INT,
    role_id INT,
    PRIMARY KEY(movie_id, artist_id, role_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (role_id) REFERENCES Role(role_id)
);

# add data into table

INSERT INTO Movie (title, release_year) VALUES
('Inception', 2010),
('The Dark Knight', 2008);

INSERT INTO Media (movie_id, media_type, file_path) VALUES
(1, 'Video', 'inception_trailer.mp4'),
(1, 'Image', 'inception_poster.jpg'),
(2, 'Video', 'dark_knight_trailer.mp4');

INSERT INTO Genre (name) VALUES
('Action'),
('Sci-Fi'),
('Drama');

INSERT INTO Movie_Genre (movie_id, genre_id) VALUES
(1, 1), -- Inception - Action
(1, 2), -- Inception - Sci-Fi
(2, 1), -- Dark Knight - Action
(2, 3); -- Dark Knight - Drama

INSERT INTO User (username) VALUES
('john_doe'),
('alice_wonder');

INSERT INTO Review (movie_id, user_id, review_text, rating) VALUES
(1, 1, 'Amazing concept and execution!', 9),
(2, 2, 'Masterpiece by Nolan!', 10);

INSERT INTO Artist (name) VALUES
('Leonardo DiCaprio'),
('Christian Bale');

INSERT INTO Skill (skill_name) VALUES
('Acting'),
('Stunt'),
('Voice Over');

INSERT INTO Artist_Skill (artist_id, skill_id) VALUES
(1, 1), -- Leo - Acting
(2, 1), -- Bale - Acting
(2, 2); -- Bale - Stunt

INSERT INTO Role (role_name) VALUES
('Hero'),
('Villain'),
('Narrator');

INSERT INTO Movie_Artist_Role (movie_id, artist_id, role_id) VALUES
(1, 1, 1), -- Leo - Hero in Inception
(2, 2, 1); -- Bale - Hero in Dark Knight

#Movie should have multiple media (Video or Image)

SELECT * FROM Media WHERE movie_id = 1;

#. Movie can belong to multiple genres

SELECT g.name
FROM Genre g
JOIN Movie_Genre mg ON g.genre_id = mg.genre_id
WHERE mg.movie_id = 1;

#Movie can have multiple reviews and review belongs to a user
SELECT u.username, r.review_text
FROM Review r
JOIN User u ON r.user_id = u.user_id
WHERE r.movie_id = 1;

#Artist can have multiple skills

SELECT s.skill_name
FROM Skill s
JOIN Artist_Skill ask ON s.skill_id = ask.skill_id
WHERE ask.artist_id = 2;

#Artist can perform multiple roles in a single film
SELECT r.role_name
FROM Role r
JOIN Movie_Artist_Role mar ON r.role_id = mar.role_id
WHERE mar.movie_id = 1 AND mar.artist_id = 1;














